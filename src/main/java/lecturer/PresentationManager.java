/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package lecturer;

import com.mycompany.javaprojectmanagementsystem.Presentation;
import com.mycompany.javaprojectmanagementsystem.lecturer;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
/**
 *
 * @author User
 */
public class PresentationManager extends javax.swing.JFrame {
    private final String lecturerName;
    private final String filePath = "presentation_request.txt";

    /**
     * Creates new form managePresentation
     * @param name
     */
    public PresentationManager(String name) {
        super(); 
        this.lecturerName = name;
        initComponents();
        setSize(1200, 700);
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        int x = (screenSize.width - getWidth()) / 2;
        int y = (screenSize.height - getHeight()) / 2;
        setLocation(x, y);
        displayPresentation();
        LecturerTextField1.setText(name);
        LecturerTextField1.setEditable(false); // Make the text field non-editable    
    }
    
    
    private void displayPresentation() {
        // Read data from the file using Presentation class
        ArrayList<Presentation> presentations = Presentation.readFromFile(filePath);

        // Create table model
        DefaultTableModel model = new DefaultTableModel();
        jTable1.setModel(model);

        // Set column names
        model.setColumnIdentifiers(new String[]{
            "Student ID", "Name", "Email", "Intake", "Topic", "Date", "Start Time",
            "End Time", "Reason", "Supervisor", "Status"
        });  
        
        for (Presentation presentation : presentations) {
            // Convert java.util.Date to LocalDate
            LocalDate date = presentation.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            // Format the LocalDate object
            String formattedDate = date.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));

            // Add the formatted date to the table model
            model.addRow(new Object[]{
                presentation.getStudentID(), presentation.getName(), presentation.getEmail(), 
                presentation.getIntake(), presentation.getTopic(), formattedDate, 
                presentation.getStartTime(), presentation.getEndTime(), presentation.getReason(),
                presentation.getSupervisor(), presentation.getStatus()
            });
        }
    }
    
        private void displayAcceptedPresentations() {
        ArrayList<Presentation> presentations = Presentation.readFromFile(filePath);
        DefaultTableModel model = new DefaultTableModel();
        JTable acceptedTable = new JTable(model);
        model.setColumnIdentifiers(new String[]{
            "Date", "Start Time", "End Time", "Student ID", "Name", "Topic"
        });

        for (Presentation presentation : presentations) {
            if ("Accepted".equalsIgnoreCase(presentation.getStatus())) {
                LocalDate date = presentation.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                String formattedDate = date.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
                model.addRow(new Object[]{
                    formattedDate, presentation.getStartTime(), presentation.getEndTime(),
                    presentation.getStudentID(), presentation.getName(), presentation.getTopic()
                });
            }
        }

        // Display in a new window
        JFrame acceptedFrame = new JFrame("Accepted Presentations");
        acceptedFrame.setSize(800, 400);
        acceptedFrame.add(new JScrollPane(acceptedTable));
        acceptedFrame.setVisible(true);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        LecturerTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        backBtn = new javax.swing.JButton();
        acceptBtn = new javax.swing.JButton();
        rejectBtn = new javax.swing.JButton();
        viewSlot = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Manage Presentation Requests");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/user-icon.png"))); // NOI18N

        LecturerTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LecturerTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LecturerTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(79, 79, 79))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LecturerTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "StudentID", "Name", "Email", "Intake", "Topic", "Date", "StartTime", "EndTime", "Reason", "SupervisorName", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        acceptBtn.setBackground(new java.awt.Color(204, 255, 204));
        acceptBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        acceptBtn.setText("Accept");
        acceptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptBtnActionPerformed(evt);
            }
        });

        rejectBtn.setBackground(new java.awt.Color(255, 0, 0));
        rejectBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rejectBtn.setText("Reject");
        rejectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectBtnActionPerformed(evt);
            }
        });

        viewSlot.setBackground(new java.awt.Color(102, 204, 255));
        viewSlot.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        viewSlot.setText("View Presentation Slot");
        viewSlot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewSlotActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(363, 363, 363)
                        .addComponent(backBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addComponent(acceptBtn)
                        .addGap(102, 102, 102)
                        .addComponent(rejectBtn)
                        .addGap(97, 97, 97)
                        .addComponent(viewSlot)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(acceptBtn)
                    .addComponent(rejectBtn)
                    .addComponent(viewSlot))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(backBtn)
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        var sp = new lecturer(lecturerName);
        sp.setVisible(true);
        dispose();

    }//GEN-LAST:event_backBtnActionPerformed

    private void acceptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptBtnActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to accept.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int response = JOptionPane.showConfirmDialog(this, "Are you sure you want to ACCEPT this presentation?", "Confirm Accept", JOptionPane.YES_NO_OPTION);
        if (response == JOptionPane.YES_OPTION) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setValueAt("Accepted", selectedRow, 10);  
            
            ArrayList<Presentation> presentations = Presentation.readFromFile(filePath);
            Presentation presentation = presentations.get(selectedRow); 
            presentation.setStatus("Accepted");
            Presentation.writeToFile(presentations, filePath);
        }


    }//GEN-LAST:event_acceptBtnActionPerformed

    private void rejectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectBtnActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to reject.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int response = JOptionPane.showConfirmDialog(this, "Are you sure you want to reject this presentation?", "Confirm Reject", JOptionPane.YES_NO_OPTION);
        if (response == JOptionPane.YES_OPTION) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setValueAt("Rejected", selectedRow, 10);  

            // Update the file
            ArrayList<Presentation> presentations = Presentation.readFromFile(filePath);
            Presentation presentation = presentations.get(selectedRow);  
            presentation.setStatus("Rejected");
            Presentation.writeToFile(presentations, filePath); 
        }
    }//GEN-LAST:event_rejectBtnActionPerformed

    private void viewSlotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewSlotActionPerformed
        displayAcceptedPresentations();
    }//GEN-LAST:event_viewSlotActionPerformed

    private void LecturerTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LecturerTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LecturerTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PresentationManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PresentationManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PresentationManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PresentationManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PresentationManager("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField LecturerTextField1;
    private javax.swing.JButton acceptBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton rejectBtn;
    private javax.swing.JButton viewSlot;
    // End of variables declaration//GEN-END:variables
}
